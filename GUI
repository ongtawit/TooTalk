import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import socketio
from MainTranslate import SUPPORTED_LANGUAGES
import threading
import pyaudio
from datetime import datetime

# Audio configuration for VOIP
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100

class TooTalkGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("TooTalk Messenger")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # Client state
        self.user_id = None
        self.language = None
        self.recipient = None
        self.audio_stream = None
        self.audio_running = False
        self.contacts = {}
        self.active_chats = {}
        
        # Initialize PyAudio
        self.p = pyaudio.PyAudio()
        
        # Setup Socket.IO client
        self.sio = socketio.Client(
            reconnection=True,
            reconnection_attempts=5,
            reconnection_delay=1
        )
        
        # Setup event handlers
        self.sio.on('connect', self.on_connect)
        self.sio.on('disconnect', self.on_disconnect)
        self.sio.on('receive_message', self.on_message)
        self.sio.on('offer', self.handle_offer)
        self.sio.on('answer', self.handle_answer)
        self.sio.on('ice_candidate', self.handle_ice_candidate)
        self.sio.on('registration_success', self.on_registration_success)
        self.sio.on('connect_error', self.on_connect_error)
        
        # Create GUI elements
        self.create_login_frame()
        self.create_main_frame()
        
        # Start with login screen
        self.show_login()
    
    def create_login_frame(self):
        """Create the login/registration frame"""
        self.login_frame = ttk.Frame(self.root, padding="20")
        
        ttk.Label(self.login_frame, text="TooTalk Messenger", font=('Helvetica', 16, 'bold')).grid(row=0, column=0, columnspan=2, pady=10)
        
        ttk.Label(self.login_frame, text="Server URL:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.server_url_entry = ttk.Entry(self.login_frame, width=30)
        self.server_url_entry.grid(row=1, column=1, pady=5)
        self.server_url_entry.insert(0, "http://localhost:5001")
        
        ttk.Label(self.login_frame, text="User ID:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.user_id_entry = ttk.Entry(self.login_frame, width=30)
        self.user_id_entry.grid(row=2, column=1, pady=5)
        
        ttk.Label(self.login_frame, text="Language:").grid(row=3, column=0, sticky=tk.W, pady=5)
        self.language_combobox = ttk.Combobox(self.login_frame, values=list(SUPPORTED_LANGUAGES.values()), state="readonly")
        self.language_combobox.grid(row=3, column=1, pady=5)
        self.language_combobox.current(0)  # Default to English
        
        self.login_button = ttk.Button(self.login_frame, text="Connect", command=self.connect_to_server)
        self.login_button.grid(row=4, column=0, columnspan=2, pady=20)
        
        self.status_label = ttk.Label(self.login_frame, text="", foreground="red")
        self.status_label.grid(row=5, column=0, columnspan=2)
    
    def create_main_frame(self):
        """Create the main messenger interface"""
        self.main_frame = ttk.Frame(self.root)
        
        # Left sidebar - Contacts
        self.contacts_frame = ttk.Frame(self.main_frame, width=200, style='Sidebar.TFrame')
        self.contacts_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)
        self.contacts_frame.pack_propagate(False)
        
        ttk.Label(self.contacts_frame, text="Contacts", style='Sidebar.TLabel').pack(pady=10)
        
        self.contacts_tree = ttk.Treeview(self.contacts_frame, height=20, selectmode='browse')
        self.contacts_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.contacts_tree['columns'] = ('status')
        self.contacts_tree.column('#0', width=120, anchor=tk.W)
        self.contacts_tree.column('status', width=50, anchor=tk.CENTER)
        self.contacts_tree.heading('#0', text='User ID')
        self.contacts_tree.heading('status', text='Status')
        
        self.contacts_tree.bind('<<TreeviewSelect>>', self.on_contact_select)
        
        # Right side - Chat area
        self.chat_frame = ttk.Frame(self.main_frame)
        self.chat_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Chat header
        self.chat_header = ttk.Frame(self.chat_frame, height=50)
        self.chat_header.pack(fill=tk.X, pady=5)
        
        self.current_chat_label = ttk.Label(self.chat_header, text="Select a contact to chat", font=('Helvetica', 12, 'bold'))
        self.current_chat_label.pack(side=tk.LEFT, padx=10)
        
        self.call_button = ttk.Button(self.chat_header, text="Call", command=self.start_call, state=tk.DISABLED)
        self.call_button.pack(side=tk.RIGHT, padx=10)
        
        # Chat messages display
        self.messages_frame = ttk.Frame(self.chat_frame)
        self.messages_frame.pack(fill=tk.BOTH, expand=True)
        
        self.messages_text = scrolledtext.ScrolledText(
            self.messages_frame,
            wrap=tk.WORD,
            state='disabled',
            font=('Helvetica', 10)
        )
        self.messages_text.pack(fill=tk.BOTH, expand=True)
        
        # Message input area
        self.input_frame = ttk.Frame(self.chat_frame, height=100)
        self.input_frame.pack(fill=tk.X, pady=5)
        
        self.message_entry = scrolledtext.ScrolledText(
            self.input_frame,
            wrap=tk.WORD,
            height=4,
            font=('Helvetica', 10)
        )
        self.message_entry.pack(fill=tk.BOTH, padx=5, pady=5)
        
        self.send_button = ttk.Button(
            self.input_frame,
            text="Send",
            command=self.send_message,
            state=tk.DISABLED
        )
        self.send_button.pack(side=tk.RIGHT, padx=5, pady=5)
    
    def show_login(self):
        """Show the login screen"""
        self.main_frame.pack_forget()
        self.login_frame.pack(fill=tk.BOTH, expand=True)
    
    def show_main(self):
        """Show the main messenger interface"""
        self.login_frame.pack_forget()
        self.main_frame.pack(fill=tk.BOTH, expand=True)
    
    def connect_to_server(self):
        """Connect to the server with provided credentials"""
        server_url = self.server_url_entry.get()
        user_id = self.user_id_entry.get()
        language_name = self.language_combobox.get()
        
        if not server_url or not user_id or not language_name:
            self.status_label.config(text="Please fill all fields")
            return
        
        # Find language code from name
        language_code = None
        for code, name in SUPPORTED_LANGUAGES.items():
            if name == language_name:
                language_code = code
                break
        
        if not language_code:
            self.status_label.config(text="Invalid language selection")
            return
        
        self.status_label.config(text="Connecting...")
        
        # Try to connect in a separate thread to avoid freezing the GUI
        def connect_thread():
            try:
                self.sio.connect(
                    server_url,
                    transports=['websocket'],
                    namespaces=['/'],
                    socketio_path='/socket.io'
                )
                
                # Register after successful connection
                self.user_id = user_id
                self.language = language_code
                self.sio.emit('register', {
                    'user_id': user_id,
                    'language': language_code
                })
                
                # Update GUI on main thread
                self.root.after(0, self.show_main)
                
            except Exception as e:
                self.root.after(0, lambda: self.status_label.config(text=f"Connection error: {str(e)}"))
        
        threading.Thread(target=connect_thread, daemon=True).start()
    
    def on_connect(self):
        """Socket.IO connect event handler"""
        print("Connected to server")
    
    def on_disconnect(self):
        """Socket.IO disconnect event handler"""
        print("Disconnected from server")
        self.root.after(0, self.show_login)
    
    def on_connect_error(self, data):
        """Socket.IO connect error handler"""
        print("Connection failed:", data)
        self.root.after(0, lambda: self.status_label.config(text=f"Connection failed: {str(data)}"))
    
    def on_registration_success(self, data):
        """Registration success handler"""
        print("Registration confirmed")
        self.root.after(0, lambda: self.status_label.config(text="Registration successful!"))
    
    def on_contact_select(self, event):
        """Handle contact selection from the treeview"""
        selected = self.contacts_tree.selection()
        if selected:
            self.recipient = self.contacts_tree.item(selected[0], 'text')
            self.update_chat_display()
            self.call_button.config(state=tk.NORMAL)
            self.send_button.config(state=tk.NORMAL)
    
    def update_chat_display(self):
        """Update the chat display for the current recipient"""
        self.messages_text.config(state='normal')
        self.messages_text.delete(1.0, tk.END)
        
        if self.recipient:
            self.current_chat_label.config(text=f"Chat with {self.recipient}")
            
            # Display chat history if available
            if self.recipient in self.active_chats:
                for msg in self.active_chats[self.recipient]:
                    self.display_message(msg)
        else:
            self.current_chat_label.config(text="Select a contact to chat")
        
        self.messages_text.config(state='disabled')
        self.messages_text.yview(tk.END)
    
    def display_message(self, msg_data):
        """Display a message in the chat window"""
        timestamp = datetime.fromisoformat(msg_data['timestamp']).strftime("%H:%M")
        sender = msg_data['from']
        
        self.messages_text.config(state='normal')
        
        # Display original message
        self.messages_text.insert(tk.END, f"[{timestamp}] {sender} ({msg_data['original_language']}):\n", 'sender')
        self.messages_text.insert(tk.END, f"{msg_data['original_message']}\n\n", 'message')
        
        # Display translated message if not from self
        if sender != self.user_id:
            self.messages_text.insert(tk.END, f"Translated to {msg_data['translated_language']}:\n", 'translation_label')
            self.messages_text.insert(tk.END, f"{msg_data['translated_message']}\n\n", 'translation')
        
        self.messages_text.config(state='disabled')
        self.messages_text.yview(tk.END)
    
    def on_message(self, data):
        """Handle incoming messages"""
        print("Received message:", data)
        
        # Add to active chats
        sender = data['from']
        if sender not in self.active_chats:
            self.active_chats[sender] = []
        self.active_chats[sender].append(data)
        
        # Update UI if this is the current chat
        if self.recipient == sender:
            self.root.after(0, self.display_message, data)
    
    def send_message(self):
        """Send a message to the current recipient"""
        message = self.message_entry.get("1.0", tk.END).strip()
        if not message or not self.recipient:
            return
        
        self.sio.emit('send_message', {
            'sender_id': self.user_id,
            'recipient_id': self.recipient,
            'message': message
        })
        
        # Clear the input field
        self.message_entry.delete("1.0", tk.END)
        
        # Create a local message display (server will echo it back)
        msg_data = {
            'from': self.user_id,
            'original_message': message,
            'translated_message': message,  # No translation needed for sender
            'original_language': self.language,
            'translated_language': self.language,
            'timestamp': datetime.now().isoformat()
        }
        
        if self.recipient not in self.active_chats:
            self.active_chats[self.recipient] = []
        self.active_chats[self.recipient].append(msg_data)
        
        self.display_message(msg_data)
    
    def start_call(self):
        """Initiate a voice call with the current recipient"""
        if not self.recipient:
            return
        
        self.sio.emit('offer', {
            'from': self.user_id,
            'to': self.recipient,
            'sdp': 'simulated_sdp_offer'
        })
        
        # Show call dialog
        self.show_call_dialog(initiator=True)
    
    def handle_offer(self, data):
        """Handle incoming call offer"""
        print("Incoming call from", data['from'])
        
        # Show call dialog
        self.root.after(0, self.show_call_dialog, data['from'], False)
    
    def handle_answer(self, data):
        """Handle call answer from recipient"""
        print("Call answered by recipient")
        self.start_audio_stream()
    
    def handle_ice_candidate(self, data):
        """Handle ICE candidate (not implemented)"""
        pass
    
    def show_call_dialog(self, caller=None, initiator=False):
        """Show call dialog (accept/decline or ongoing call)"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Voice Call")
        dialog.geometry("300x200")
        
        if initiator:
            ttk.Label(dialog, text=f"Calling {self.recipient}...").pack(pady=20)
        else:
            ttk.Label(dialog, text=f"Incoming call from {caller}").pack(pady=20)
        
        button_frame = ttk.Frame(dialog)
        button_frame.pack(pady=20)
        
        if not initiator:
            ttk.Button(button_frame, text="Accept", command=lambda: self.accept_call(dialog, caller)).pack(side=tk.LEFT, padx=10)
            ttk.Button(button_frame, text="Decline", command=dialog.destroy).pack(side=tk.LEFT, padx=10)
        else:
            ttk.Button(button_frame, text="End Call", command=lambda: self.end_call(dialog)).pack(pady=10)
    
    def accept_call(self, dialog, caller):
        """Accept an incoming call"""
        dialog.destroy()
        self.sio.emit('answer', {
            'from': self.user_id,
            'to': caller,
            'sdp': 'simulated_sdp_answer'
        })
        self.start_audio_stream()
        self.show_call_dialog(caller, initiator=True)
    
    def end_call(self, dialog=None):
        """End the current call"""
        self.stop_audio_stream()
        if dialog:
            dialog.destroy()
        print("Call ended")
    
    def start_audio_stream(self):
        """Start audio streaming (simulated)"""
        if self.audio_running:
            return
            
        self.audio_running = True
        self.audio_stream = self.p.open(
            format=FORMAT,
            channels=CHANNELS,
            rate=RATE,
            input=True,
            output=True,
            frames_per_buffer=CHUNK
        )
        print("Audio streaming started (simulated)")
    
    def stop_audio_stream(self):
        """Stop audio streaming"""
        if not self.audio_running:
            return
            
        self.audio_running = False
        if self.audio_stream:
            self.audio_stream.stop_stream()
            self.audio_stream.close()
        print("Audio streaming stopped")
    
    def add_contact(self, user_id, status='online'):
        """Add a contact to the contact list"""
        if user_id not in self.contacts:
            self.contacts[user_id] = status
            self.contacts_tree.insert('', 'end', text=user_id, values=(status,))
    
    def update_contact_status(self, user_id, status):
        """Update contact status in the contact list"""
        if user_id in self.contacts:
            self.contacts[user_id] = status
            for child in self.contacts_tree.get_children():
                if self.contacts_tree.item(child, 'text') == user_id:
                    self.contacts_tree.item(child, values=(status,))
                    break

if __name__ == "__main__":
    root = tk.Tk()
    
    # Configure styles
    style = ttk.Style()
    style.configure('Sidebar.TFrame', background='#f0f0f0')
    style.configure('Sidebar.TLabel', background='#f0f0f0', font=('Helvetica', 10, 'bold'))
    
    # Configure text tags for message display
    text_tags = {
        'sender': {'foreground': 'blue', 'font': ('Helvetica', 10, 'bold')},
        'message': {'font': ('Helvetica', 10)},
        'translation_label': {'foreground': 'green', 'font': ('Helvetica', 9, 'italic')},
        'translation': {'font': ('Helvetica', 10), 'foreground': '#555555'}
    }
    
    app = TooTalkGUI(root)
    
    # Add some sample contacts for demonstration
    app.add_contact("user1", "online")
    app.add_contact("user2", "away")
    app.add_contact("user3", "offline")
    
    root.mainloop()
